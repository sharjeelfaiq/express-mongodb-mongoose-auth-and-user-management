openapi: 3.0.3
info:
  title: User Management API
  version: v1
  description: |
    Comprehensive API for managing user accounts and profiles with role-based access control.

    **Features:**
    - User profile retrieval and management
    - Profile picture upload and management
    - Role-based access control (admin privileges for user deletion)
    - Automatic password exclusion from all responses

    **Authentication:**
    - All endpoints require valid JWT authentication token
    - DELETE operations require admin role privileges
    - Tokens obtained from Authentication API sign-in endpoint
  contact:
    name: API Support
    email: support@yourapi.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.yourapp.com
    description: Production server
  - url: https://staging-api.yourapp.com
    description: Staging server
  - url: http://localhost:3000
    description: Development server

tags:
  - name: User Management
    description: User account management and profile operations

components:
  schemas:
    # Primitive Types
    ID:
      type: string
      description: MongoDB ObjectId identifier
      example: "60d0fe4f5311236168a109ca"
      pattern: "^[0-9a-fA-F]{24}$"

    Email:
      type: string
      format: email
      description: Valid email address (lowercase, trimmed)
      example: "johndoe@example.com"
      maxLength: 255
      minLength: 5
      pattern: "^\\S+@\\S+\\.\\S+$"

    Role:
      type: string
      enum: [admin, user]
      description: |
        User role determining system access:
        - `admin`: Full system access including user management
        - `user`: User-level access
      default: user
      example: user

    ProfilePictureUrl:
      type: string
      description: Relative URL path to uploaded profile picture
      example: "/uploads/profile-picture-123.jpg"
      pattern: "^/uploads/[a-zA-Z0-9_-]+\\.(jpg|jpeg|png|gif)$"

    Timestamp:
      type: string
      format: date-time
      description: ISO 8601 timestamp with timezone
      example: "2024-01-15T10:30:00.000Z"

    # Core User Profile (matching actual UserModel)
    UserProfile:
      type: object
      required:
        - _id
        - email
        - role
        - isEmailVerified
        - createdAt
        - updatedAt
      properties:
        _id:
          $ref: "#/components/schemas/ID"
        email:
          $ref: "#/components/schemas/Email"
        role:
          $ref: "#/components/schemas/Role"
        isEmailVerified:
          type: boolean
          description: Email verification status
          example: true
        profilePicture:
          allOf:
            - $ref: "#/components/schemas/ProfilePictureUrl"
          nullable: true
          description: Profile picture URL (set via file upload)
        createdAt:
          $ref: "#/components/schemas/Timestamp"
        updatedAt:
          $ref: "#/components/schemas/Timestamp"
      example:
        _id: "60d0fe4f5311236168a109ca"
        email: "johndoe@example.com"
        role: "user"
        isEmailVerified: true
        profilePicture: "/uploads/profile-123.jpg"
        createdAt: "2024-01-15T10:30:00.000Z"
        updatedAt: "2024-01-15T12:45:00.000Z"

    # Request/Response DTOs
    UserUpdateRequest:
      type: object
      properties:
        profilePicture:
          type: string
          format: binary
          description: Profile picture file to upload (jpg, jpeg, png, gif)
      description: |
        User profile update data. Profile picture upload will replace existing picture and delete old file.

    BaseResponse:
      type: object
      required:
        - success
        - message
      properties:
        success:
          type: boolean
          description: Operation success indicator
        message:
          type: string
          description: Human-readable response message

    ErrorResponse:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - type: object
          properties:
            success:
              example: false
            message:
              example: "An error occurred processing your request"

    UserResponse:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - type: object
          required:
            - data
          properties:
            data:
              $ref: "#/components/schemas/UserProfile"
          example:
            success: true
            message: "User retrieved successfully"
            data:
              _id: "60d0fe4f5311236168a109ca"
              email: "johndoe@example.com"
              role: "user"
              isEmailVerified: true

    UserListResponse:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - type: object
          required:
            - data
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/UserProfile"
              description: Array of user profiles
          examples:
            with_users:
              summary: Users found
              value:
                success: true
                message: "Users retrieved successfully"
                data:
                  [
                    {
                      _id: "60d0fe4f5311236168a109ca",
                      email: "johndoe@example.com",
                      role: "user",
                    },
                  ]
            empty_list:
              summary: No users found
              value:
                success: true
                message: "No users found"
                data: []

    UserDeleteResponse:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - type: object
          example:
            success: true
            message: "User deleted successfully"

  responses:
    # Success Responses
    UserListSuccess:
      description: User list retrieved successfully
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UserListResponse"

    UserSuccess:
      description: User operation completed successfully
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UserResponse"

    UserUpdateSuccess:
      description: User profile updated successfully
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UserResponse"
          example:
            success: true
            message: "User updated successfully"
            data:
              _id: "60d0fe4f5311236168a109ca"
              email: "johndoe@example.com"
              role: "user"
              profilePicture: "/uploads/new-profile-456.jpg"

    UserDeleteSuccess:
      description: User deleted successfully
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UserDeleteResponse"

    # Error Responses
    BadRequest:
      description: Invalid request data or parameters
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            invalid_user_id:
              summary: Invalid MongoDB ObjectId format
              value:
                success: false
                message: "Invalid user ID format"
            file_upload_error:
              summary: Profile picture upload failed
              value:
                success: false
                message: "Invalid file format. Only jpg, jpeg, png, gif allowed"

    Unauthorized:
      description: Authentication token missing or invalid
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            missing_token:
              summary: No authentication token provided
              value:
                success: false
                message: "Access token is required"
            invalid_token:
              summary: Token expired or malformed
              value:
                success: false
                message: "Invalid or expired token"

    Forbidden:
      description: Insufficient permissions for requested operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            admin_required:
              summary: Admin role required for user deletion
              value:
                success: false
                message: "Admin access required"
            insufficient_permissions:
              summary: General permission denied
              value:
                success: false
                message: "You don't have permission to perform this action"

    NotFound:
      description: Requested user not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            user_not_found:
              summary: User ID does not exist
              value:
                success: false
                message: "User not found"

    InternalServerError:
      description: Unexpected server error occurred
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            update_failed:
              summary: Database update operation failed
              value:
                success: false
                message: "User update failed"
            file_system_error:
              summary: File operation failed
              value:
                success: false
                message: "Failed to process profile picture"
            server_error:
              summary: General server error
              value:
                success: false
                message: "Internal server error occurred"

  parameters:
    UserIDPath:
      in: path
      name: id
      required: true
      description: MongoDB ObjectId of the user to operate on
      schema:
        $ref: "#/components/schemas/ID"
      example: "60d0fe4f5311236168a109ca"

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        JWT token obtained from the Authentication API sign-in endpoint.
        Include in the Authorization header as: `Bearer <token>`

security:
  - bearerAuth: []

paths:
  /api/users:
    get:
      summary: Retrieve all users
      description: |
        Fetches a list of all registered users in the system.

        **Authentication:** Bearer token required
        **Authorization:** Available to all authenticated users
        **Response:** Password fields automatically excluded from all user objects

        **Behavior:**
        - Returns empty array with success message when no users exist
        - All user objects exclude sensitive password information
        - Includes user verification status and timestamps
      operationId: getAllUsers
      tags: [User Management]
      responses:
        200:
          $ref: "#/components/responses/UserListSuccess"
        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/InternalServerError"

  /api/users/{id}:
    get:
      summary: Retrieve user by ID
      description: |
        Fetches detailed profile information for a specific user.

        **Authentication:** Bearer token required
        **Authorization:** Available to all authenticated users
        **Response:** Password field automatically excluded

        **Features:**
        - Returns complete user profile including verification status
        - Validates MongoDB ObjectId format
        - Throws 404 if user does not exist
      operationId: getUserById
      tags: [User Management]
      parameters:
        - $ref: "#/components/parameters/UserIDPath"
      responses:
        200:
          $ref: "#/components/responses/UserSuccess"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"

    patch:
      summary: Update user profile
      description: |
        Updates user profile information with support for file uploads.

        **Authentication:** Bearer token required
        **Authorization:** Available to all authenticated users
        **Content-Type:** multipart/form-data (for file upload support)

        **Features:**
        - Profile picture upload with automatic old file cleanup
        - Returns updated user object

        **File Upload:**
        - Supported formats: jpg, jpeg, png, gif
        - Files stored in `/uploads/` directory
        - Old profile pictures automatically deleted
        - Uses `req.files.profilePicture[0]` in implementation

        **Error Handling:**
        - 404 if user not found
        - 500 if database update fails
      operationId: updateUserById
      tags: [User Management]
      parameters:
        - $ref: "#/components/parameters/UserIDPath"
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/UserUpdateRequest"
            examples:
              upload_picture:
                summary: Upload new profile picture
                value:
                  profilePicture: "[binary file data]"
      responses:
        200:
          $ref: "#/components/responses/UserUpdateSuccess"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"

    delete:
      summary: Delete user account
      description: |
        Permanently removes a user account from the system.

        **Authentication:** Bearer token required
        **Authorization:** Admin role required (enforced by verifyAuthRole middleware)
        **Security:** This operation is irreversible

        **Features:**
        - Only users with 'admin' role can delete accounts
        - Returns 204 status with JSON response body
        - Validates user existence before deletion

        **Note:** Implementation returns 204 No Content with JSON body,
        which is unconventional but matches actual controller behavior.
      operationId: deleteUserById
      tags: [User Management]
      parameters:
        - $ref: "#/components/parameters/UserIDPath"
      responses:
        204:
          $ref: "#/components/responses/UserDeleteSuccess"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"