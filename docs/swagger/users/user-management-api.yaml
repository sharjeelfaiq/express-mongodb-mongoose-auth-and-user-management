openapi: 3.0.3
info:
  title: User Management API
  version: v1
  description: |
    Comprehensive API for managing user accounts and profiles with role-based access control.

    **Features:**
    - User profile retrieval and management
    - Profile picture upload and management
    - Role-based access control (admin privileges for user deletion)
    - Automatic password exclusion from all responses

    **Authentication:**
    - All endpoints require valid JWT authentication token
    - DELETE operations require admin role privileges
    - Tokens obtained from Authentication API sign-in endpoint

  contact:
    name: API Support
    email: support@yourapi.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.yourapp.com
    description: Production server
  - url: https://romulus-backend.onrender.com
    description: Staging server
  - url: http://localhost:5000
    description: Development server

tags:
  - name: User Management
    description: User account management and profile operations

components:
  schemas:
    # ================================
    # PRIMITIVE TYPES
    # ================================
    ID:
      type: string
      description: MongoDB ObjectId identifier
      example: "60d0fe4f5311236168a109ca"
      pattern: "^[0-9a-fA-F]{24}$"
      minLength: 24
      maxLength: 24

    Email:
      type: string
      format: email
      description: Valid email address (lowercase, trimmed)
      example: "user@example.com"
      maxLength: 255
      minLength: 5
      pattern: "^\\S+@\\S+\\.\\S+$"

    PhoneNumber:
      type: string
      description: Phone number in international format
      example: "+1234567890"
      pattern: "^\\+?[1-9]\\d{1,14}$"
      minLength: 10
      maxLength: 15

    Role:
      type: string
      enum: [admin, organization, educator]
      description: |
        User role determining access permissions:
        - `admin`: Full system access
        - `organization`: Organization management
        - `educator`: Content creation and student management
      default: educator
      example: educator

    Timestamp:
      type: string
      format: date-time
      description: ISO 8601 timestamp with timezone
      example: "2024-01-15T10:30:00.000Z"

    ProfilePictureUrl:
      type: string
      description: Relative URL path to uploaded profile picture
      example: "/uploads/profile-picture-123.jpg"
      pattern: "^/uploads/[a-zA-Z0-9_-]+\\.(jpg|jpeg|png|gif)$"

    # ================================
    # RESPONSE STRUCTURES
    # ================================
    BaseResponse:
      type: object
      required:
        - success
        - message
      properties:
        success:
          type: boolean
          description: Indicates if the operation completed successfully
        message:
          type: string
          description: Human-readable response message
          example: "Operation completed successfully"

    ErrorResponse:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - type: object
          properties:
            success:
              example: false
            message:
              example: "An error occurred processing your request"

    # ================================
    # USER RELATED SCHEMAS
    # ================================
    UserProfile:
      type: object
      required:
        - _id
        - email
        - role
        - isEmailVerified
        - isPhoneVerified
        - createdAt
        - updatedAt
      properties:
        _id:
          $ref: "#/components/schemas/ID"
        email:
          $ref: "#/components/schemas/Email"
        phone:
          allOf:
            - $ref: "#/components/schemas/PhoneNumber"
          nullable: true
          description: Phone number (required for educators)
        role:
          $ref: "#/components/schemas/Role"
        isEmailVerified:
          type: boolean
          description: Email verification status
          example: true
        isPhoneVerified:
          type: boolean
          description: Phone verification status (required for educators)
          example: false
        profilePicture:
          allOf:
            - $ref: "#/components/schemas/ProfilePictureUrl"
          nullable: true
          description: Profile picture URL
        createdAt:
          $ref: "#/components/schemas/Timestamp"
        updatedAt:
          $ref: "#/components/schemas/Timestamp"

    # ================================
    # REQUEST SCHEMAS
    # ================================
    UserUpdateRequest:
      type: object
      properties:
        phone:
          allOf:
            - $ref: "#/components/schemas/PhoneNumber"
          nullable: true
          description: Updated phone number
        profilePicture:
          type: string
          format: binary
          description: Profile picture file to upload (jpg, jpeg, png, gif)
      description: |
        User profile update data. All fields are optional for partial updates.
        Profile picture upload will replace existing picture and delete old file.

    # ================================
    # RESPONSE SCHEMAS
    # ================================
    UserResponse:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - type: object
          required:
            - data
          properties:
            data:
              $ref: "#/components/schemas/UserProfile"
          example:
            success: true
            message: "User retrieved successfully"
            data:
              _id: "60d0fe4f5311236168a109ca"
              email: "johndoe@example.com"
              role: "educator"
              isEmailVerified: true
              isPhoneVerified: false

    UserListResponse:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - type: object
          required:
            - data
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/UserProfile"
              description: Array of user profiles
          examples:
            withUsers:
              summary: Users found
              value:
                success: true
                message: "Users retrieved successfully"
                data:
                  - _id: "60d0fe4f5311236168a109ca"
                    email: "johndoe@example.com"
                    role: "educator"
                    isEmailVerified: true
                    isPhoneVerified: false
            emptyList:
              summary: No users found
              value:
                success: true
                message: "No users found"
                data: []

  parameters:
    UserIdPath:
      in: path
      name: id
      required: true
      description: MongoDB ObjectId of the user
      schema:
        $ref: "#/components/schemas/ID"

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        JWT token obtained from the authentication sign-in endpoint.
        Include in the Authorization header as: `Bearer <token>`

  responses:
    # ================================
    # SUCCESS RESPONSES
    # ================================
    UserListSuccess:
      description: User list retrieved successfully
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UserListResponse"

    UserRetrievalSuccess:
      description: User retrieved successfully
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UserResponse"

    UserUpdateSuccess:
      description: User profile updated successfully
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UserResponse"
          example:
            success: true
            message: "User updated successfully"
            data:
              _id: "60d0fe4f5311236168a109ca"
              email: "johndoe@example.com"
              phone: "+1987654321"
              role: "educator"
              profilePicture: "/uploads/new-profile-456.jpg"

    UserDeleteSuccess:
      description: User deleted successfully
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/BaseResponse"
              - type: object
                example:
                  success: true
                  message: "User deleted successfully"

    # ================================
    # ERROR RESPONSES
    # ================================
    UserManagementBadRequest:
      description: Invalid request data or parameters
      content:
        application/json:
          schema:
            $ref: "common.yaml#/components/schemas/ErrorResponse"
          examples:
            invalidUserId:
              summary: Invalid MongoDB ObjectId format
              value:
                success: false
                message: "Invalid user ID format"
                error:
                  code: "INVALID_USER_ID"
            validationError:
              summary: Phone number validation failed
              value:
                success: false
                message: "Please provide a valid phone number"
                error:
                  code: "PHONE_VALIDATION"
            fileUploadError:
              summary: Profile picture upload failed
              value:
                success: false
                message: "Invalid file format. Only jpg, jpeg, png, gif allowed"
                error:
                  code: "INVALID_FILE_FORMAT"

    UserManagementForbidden:
      description: Insufficient permissions for requested operation
      content:
        application/json:
          schema:
            $ref: "common.yaml#/components/schemas/ErrorResponse"
          examples:
            adminRequired:
              summary: Admin role required for user deletion
              value:
                success: false
                message: "Admin access required"
                error:
                  code: "ADMIN_REQUIRED"
            insufficientPermissions:
              summary: General permission denied
              value:
                success: false
                message: "You don't have permission to perform this action"
                error:
                  code: "INSUFFICIENT_PERMISSIONS"

    UserManagementInternalServerError:
      description: Unexpected server error occurred
      content:
        application/json:
          schema:
            $ref: "common.yaml#/components/schemas/ErrorResponse"
          examples:
            updateFailed:
              summary: Database update operation failed
              value:
                success: false
                message: "User update failed"
                error:
                  code: "UPDATE_FAILED"
            fileSystemError:
              summary: File operation failed
              value:
                success: false
                message: "Failed to process profile picture"
                error:
                  code: "FILE_SYSTEM_ERROR"
            deleteFailed:
              summary: User deletion failed
              value:
                success: false
                message: "Failed to delete user"
                error:
                  code: "DELETE_FAILED"

security:
  - BearerAuth: []

paths:
  /api/v1/users:
    get:
      summary: Retrieve all users
      description: |
        Fetches a list of all registered users in the system.

        **Authentication:** Bearer token required
        **Authorization:** Available to all authenticated users
        **Response:** Password fields automatically excluded from all user objects

        **Behavior:**
        - Returns empty array with success message when no users exist
        - All user objects exclude sensitive password information
        - Includes user verification status and timestamps
      operationId: get-all-users
      tags: [User Management]
      security:
        - BearerAuth: []
      responses:
        200:
          $ref: "#/components/responses/UserListSuccess"
        401:
          $ref: "common.yaml#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/UserManagementInternalServerError"

  /api/v1/users/{id}:
    get:
      summary: Retrieve user by ID
      description: |
        Fetches detailed profile information for a specific user.

        **Authentication:** Bearer token required
        **Authorization:** Available to all authenticated users
        **Response:** Password field automatically excluded

        **Features:**
        - Returns complete user profile including verification status
        - Validates MongoDB ObjectId format
        - Throws 404 if user does not exist
      operationId: get-user-by-id
      tags: [User Management]
      security:
        - BearerAuth: []
      parameters:
        - $ref: "common.yaml#/components/parameters/UserIdPath"
      responses:
        200:
          $ref: "#/components/responses/UserRetrievalSuccess"
        400:
          $ref: "#/components/responses/UserManagementBadRequest"
        401:
          $ref: "common.yaml#/components/responses/Unauthorized"
        404:
          $ref: "common.yaml#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/UserManagementInternalServerError"

    patch:
      summary: Update user profile
      description: |
        Updates user profile information with support for file uploads.

        **Authentication:** Bearer token required
        **Authorization:** Available to all authenticated users
        **Content-Type:** multipart/form-data (for file upload support)

        **Features:**
        - Partial updates supported (only provided fields updated)
        - Profile picture upload with automatic old file cleanup
        - Phone number format validation
        - Returns updated user object

        **File Upload:**
        - Supported formats: jpg, jpeg, png, gif
        - Files stored in `/uploads/` directory
        - Old profile pictures automatically deleted
        - Uses `req.files.profilePicture[0]` in implementation

        **Error Handling:**
        - 404 if user not found
        - 500 if database update fails
        - Validation errors for invalid phone format
      operationId: update-user-by-id
      tags: [User Management]
      security:
        - BearerAuth: []
      parameters:
        - $ref: "common.yaml#/components/parameters/UserIdPath"
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/UserUpdateRequest"
            examples:
              updatePhone:
                summary: Update phone number only
                value:
                  phone: "+1987654321"
              uploadPicture:
                summary: Upload new profile picture
                value:
                  profilePicture: "[binary file data]"
              fullUpdate:
                summary: Update phone and picture
                value:
                  phone: "+1555123456"
                  profilePicture: "[binary file data]"
      responses:
        200:
          $ref: "#/components/responses/UserUpdateSuccess"
        400:
          $ref: "#/components/responses/UserManagementBadRequest"
        401:
          $ref: "common.yaml#/components/responses/Unauthorized"
        404:
          $ref: "common.yaml#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/UserManagementInternalServerError"

    delete:
      summary: Delete user account
      description: |
        Permanently removes a user account from the system.

        **Authentication:** Bearer token required
        **Authorization:** Admin role required (enforced by verifyAuthRole middleware)
        **Security:** This operation is irreversible

        **Features:**
        - Only users with 'admin' role can delete accounts
        - Returns 204 status with JSON response body
        - Validates user existence before deletion

        **Note:** Implementation returns 204 No Content with JSON body,
        which is unconventional but matches actual controller behavior.
      operationId: delete-user-by-id
      tags: [User Management]
      security:
        - BearerAuth: []
      parameters:
        - $ref: "common.yaml#/components/parameters/UserIdPath"
      responses:
        204:
          $ref: "#/components/responses/UserDeleteSuccess"
        401:
          $ref: "common.yaml#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/UserManagementForbidden"
        404:
          $ref: "common.yaml#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/UserManagementInternalServerError"
# Removed duplicate components section to ensure unique map keys
