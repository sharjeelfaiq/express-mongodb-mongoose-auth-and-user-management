openapi: 3.0.3
info:
  title: OTP API
  version: 1.0.0
  description: |
    RESTful API for One-Time Password (OTP) generation, delivery, and verification.
    
    ## Overview
    This API provides secure OTP-based authentication for password reset and two-factor authentication flows.
    
    ## Key Features
    - Cryptographically secure 6-digit OTP generation
    - Bcrypt hashing with salt for OTP storage
    - 5-minute automatic expiration with MongoDB TTL
    - Support for multiple concurrent OTPs per user
    - Email delivery via Nodemailer
    
    ## Security Model
    - OTPs are hashed using bcrypt (10 salt rounds) before storage
    - Automatic cleanup via MongoDB TTL index
    - Constant-time comparison to prevent timing attacks
    - No authentication required (used for password reset flow)
    
    ## Integration Points
    - User Management API for user validation
    - Email service for OTP delivery
    - MongoDB for secure OTP storage
  contact:
    name: API Support Team
    email: support@yourapp.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.yourapp.com
    description: Production server
  - url: https://staging-api.yourapp.com
    description: Staging server
  - url: http://localhost:3000
    description: Local development server

tags:
  - name: OTP
    description: One-Time Password generation and verification endpoints

paths:
  /api/otp/send:
    post:
      tags:
        - OTP
      summary: Generate and send OTP
      description: |
        Generates a secure 6-digit OTP and sends it to the user's registered email address.
        
        ## Process Flow
        1. Validates user existence by email lookup
        2. Generates cryptographically secure 6-digit OTP using `crypto.randomInt(100000, 999999)`
        3. Hashes OTP using bcrypt with 10 salt rounds
        4. Stores hashed OTP with 5-minute expiration time
        5. Sends raw OTP to user's email via configured email service
        6. Returns success confirmation
        
        ## OTP Properties
        - **Format**: 6-digit numeric code (100000-999999)
        - **Expiration**: 5 minutes from generation
        - **Storage**: Hashed with bcrypt, auto-deleted after expiration
        - **Delivery**: HTML email template via Nodemailer
        
        ## Error Handling
        - User validation failure returns 404
        - Database save failure returns 500
        - Email delivery failures are logged but may not fail the request
      operationId: sendOtp
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OtpSendRequest'
            example:
              email: user@example.com
      responses:
        '200':
          $ref: '#/components/responses/OtpSent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/UserNotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/otp/verify:
    post:
      tags:
        - OTP
      summary: Verify OTP
      description: |
        Verifies the provided OTP against stored OTPs for the specified user.
        
        ## Process Flow
        1. Validates user existence by email lookup
        2. Retrieves all active (non-expired) OTPs for the user
        3. Compares provided OTP against each stored hash using bcrypt
        4. Returns success if any comparison matches
        
        ## Verification Features
        - **Multiple OTP Support**: Handles concurrent OTPs gracefully
        - **Secure Comparison**: Uses bcrypt.compare() for constant-time comparison
        - **Automatic Cleanup**: Expired OTPs are auto-removed by MongoDB TTL
        - **Race Condition Handling**: Supports multiple active OTPs per user
        
        ## Security Considerations
        - All comparisons are performed even after a match is found
        - Constant-time comparison prevents timing attacks
        - Generic error messages prevent user enumeration
      operationId: verifyOtp
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OtpVerifyRequest'
            example:
              email: user@example.com
              otp: "123456"
      responses:
        '200':
          $ref: '#/components/responses/OtpVerified'
        '400':
          $ref: '#/components/responses/InvalidOtp'
        '404':
          $ref: '#/components/responses/UserNotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  schemas:
    Email:
      type: string
      format: email
      description: Valid email address
      example: user@example.com
      minLength: 5
      maxLength: 255
      pattern: '^[\w\.-]+@[\w\.-]+\.\w+$'

    OtpCode:
      type: string
      description: 6-digit numeric OTP code
      example: "123456"
      pattern: '^[0-9]{6}$'
      minLength: 6
      maxLength: 6

    OtpSendRequest:
      type: object
      required:
        - email
      properties:
        email:
          $ref: '#/components/schemas/Email'
      description: Request to generate and send OTP

    OtpVerifyRequest:
      type: object
      required:
        - email
        - otp
      properties:
        email:
          $ref: '#/components/schemas/Email'
        otp:
          $ref: '#/components/schemas/OtpCode'
      description: Request to verify OTP

    SuccessResponse:
      type: object
      required:
        - success
        - message
      properties:
        success:
          type: boolean
          description: Operation success indicator
          example: true
        message:
          type: string
          description: Human-readable success message

    ErrorResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          description: Error message describing the issue
        error:
          type: object
          description: Additional error details from http-errors
          properties:
            statusCode:
              type: integer
              description: HTTP status code
            status:
              type: string
              description: Error status text

  responses:
    OtpSent:
      description: OTP generated and sent successfully
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SuccessResponse'
          example:
            success: true
            message: OTP sent successfully

    OtpVerified:
      description: OTP verified successfully
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SuccessResponse'
          example:
            success: true
            message: OTP Verified

    BadRequest:
      description: Invalid request data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            missingEmail:
              summary: Email field missing
              value:
                message: Email is required
            invalidEmailFormat:
              summary: Invalid email format
              value:
                message: Please provide a valid email address
            missingOtp:
              summary: OTP field missing
              value:
                message: OTP is required

    InvalidOtp:
      description: OTP validation failed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            noActiveOtp:
              summary: No active OTPs found
              value:
                message: Invalid OTP
            otpMismatch:
              summary: OTP does not match
              value:
                message: Invalid OTP

    UserNotFound:
      description: User not found with provided email
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            message: User not found.

    InternalServerError:
      description: Server error during operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            saveFailed:
              summary: Database save operation failed
              value:
                message: Failed to save OTP.
            emailFailed:
              summary: Email delivery failed
              value:
                message: Failed to send OTP email.

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT authentication (not required for OTP endpoints)

x-readme:
  explorer-enabled: true
  proxy-enabled: true
  samples-languages:
    - curl
    - javascript
    - python
    - node

x-implementation-notes:
  otp-generation: |
    OTPs are generated using Node.js crypto.randomInt(100000, 999999)
    ensuring cryptographically secure random 6-digit numbers.
  
  storage: |
    OTPs are hashed using bcrypt with 10 salt rounds before storage.
    MongoDB TTL index on expiresAt field ensures automatic cleanup.
  
  verification: |
    All stored OTPs are compared using Promise.all() to ensure
    constant-time execution regardless of match position.
  
  email-delivery: |
    OTP emails use HTML templates from views/otp-email/index.html
    with dynamic OTP code substitution.
  
  expiration: |
    OTPs expire exactly 5 minutes after generation.
    Expired OTPs are automatically removed by MongoDB.

x-code-samples:
  - lang: curl
    label: Send OTP
    source: |
      curl -X POST https://api.yourapp.com/api/otp/send \
        -H "Content-Type: application/json" \
        -d '{"email": "user@example.com"}'
  
  - lang: javascript
    label: Verify OTP
    source: |
      const response = await fetch('https://api.yourapp.com/api/otp/verify', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          email: 'user@example.com',
          otp: '123456'
        })
      });
      const result = await response.json();