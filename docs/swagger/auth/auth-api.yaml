openapi: 3.0.3
info:
  title: Authentication API
  version: v1
  description: |
    Comprehensive API for user authentication and account management with role-based access control.

    **Supported Roles:**
    - `admin`: Administrative privileges
    - `organization`: Organization management capabilities  
    - `educator`: Educational content and user management (requires phone verification)

    **Authentication Flow:**
    1. Register with email, password, and role
    2. Verify email address via sent verification link
    3. For educators: Verify phone number via WhatsApp SMS
    4. Sign in to receive JWT token
    5. Use token in Authorization header for protected endpoints

  contact:
    name: API Support
    email: support@yourapi.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.yourapp.com
    description: Production server
  - url: https://romulus-backend.onrender.com
    description: Staging server
  - url: http://localhost:5000
    description: Development server

tags:
  - name: Authentication
    description: User authentication and account management

components:
  schemas:
    # ================================
    # PRIMITIVE TYPES
    # ================================
    UserID:
      type: string
      description: MongoDB ObjectId identifier for the user
      example: "60d0fe4f5311236168a109ca"
      pattern: "^[0-9a-fA-F]{24}$"
      minLength: 24
      maxLength: 24

    Email:
      type: string
      format: email
      description: Valid email address (lowercase, trimmed)
      example: "user@example.com"
      maxLength: 255
      minLength: 5
      pattern: "^\\S+@\\S+\\.\\S+$"

    PhoneNumber:
      type: string
      description: Phone number in international format
      example: "+1234567890"
      pattern: "^\\+?[1-9]\\d{1,14}$"
      minLength: 10
      maxLength: 15

    Password:
      type: string
      format: password
      description: |
        Secure password with requirements:
        - Minimum 8 characters
        - At least one uppercase letter
        - At least one lowercase letter  
        - At least one number
        - At least one special character
      example: "SecurePass123!"
      minLength: 8
      maxLength: 128

    Role:
      type: string
      enum: [admin, organization, educator]
      description: |
        User role determining access permissions:
        - `admin`: Full system access
        - `organization`: Organization management
        - `educator`: Content creation and student management
      default: educator
      example: educator

    Token:
      type: string
      description: JWT authentication or verification token
      example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      minLength: 20

    # ================================
    # RESPONSE STRUCTURES
    # ================================
    BaseResponse:
      type: object
      required:
        - success
        - message
      properties:
        success:
          type: boolean
          description: Indicates if the operation completed successfully
        message:
          type: string
          description: Human-readable response message
          example: "Operation completed successfully"

    ErrorResponse:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - type: object
          properties:
            success:
              example: false
            message:
              example: "An error occurred processing your request"

    # ================================
    # REQUEST SCHEMAS
    # ================================
    SignUpRequest:
      type: object
      required:
        - email
        - password
        - role
      properties:
        email:
          $ref: "#/components/schemas/Email"
        password:
          $ref: "#/components/schemas/Password"
        role:
          $ref: "#/components/schemas/Role"
        phone:
          allOf:
            - $ref: "#/components/schemas/PhoneNumber"
          description: |
            Phone number requirements by role:
            - **Required** for educators
            - **Optional** for organizations (ignored if provided)
            - **Not applicable** for admins (ignored if provided)
      example:
        email: "educator@example.com"
        password: "SecurePass123!"
        role: "educator"
        phone: "+1234567890"

    SignInRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          $ref: "#/components/schemas/Email"
        password:
          $ref: "#/components/schemas/Password"
      example:
        email: "educator@example.com"
        password: "SecurePass123!"

    ForgotPasswordRequest:
      type: object
      required:
        - email
      properties:
        email:
          $ref: "#/components/schemas/Email"
      example:
        email: "educator@example.com"

    UpdatePasswordRequest:
      type: object
      required:
        - password
        - token
      properties:
        password:
          $ref: "#/components/schemas/Password"
        token:
          $ref: "#/components/schemas/Token"
      example:
        password: "NewSecurePass456!"
        token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

    # ================================
    # RESPONSE DATA SCHEMAS
    # ================================
    SignInData:
      type: object
      required:
        - userId
        - role
      properties:
        userId:
          $ref: "#/components/schemas/ID"
        role:
          $ref: "#/components/schemas/Role"
      example:
        userId: "60d0fe4f5311236168a109ca"
        role: "educator"

    # ================================
    # RESPONSE SCHEMAS
    # ================================
    SignUpResponse:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - type: object
          example:
            success: true
            message: "Account registered successfully. Please verify your email address."

    SignInResponse:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - type: object
          required:
            - data
            - token
          properties:
            data:
              $ref: "#/components/schemas/SignInData"
            token:
              $ref: "#/components/schemas/Token"
          example:
            success: true
            message: "Signed in successfully"
            data:
              userId: "60d0fe4f5311236168a109ca"
              role: "educator"
            token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

  responses:
    # ================================
    # SUCCESS RESPONSES
    # ================================
    SignUpSuccess:
      description: User account created successfully
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SignUpResponse"

    SignInSuccess:
      description: User authenticated successfully
      headers:
        Authorization:
          description: Bearer token for subsequent authenticated requests
          schema:
            type: string
            example: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        Access-Control-Expose-Headers:
          description: Exposed headers for CORS compatibility
          schema:
            type: string
            example: "Authorization"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SignInResponse"

    # ================================
    # ERROR RESPONSES
    # ================================
    BadRequest:
      description: Invalid request data or business logic violation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            passwordValidation:
              summary: Password validation failed
              value:
                success: false
                message: "Password must meet security requirements"
                error:
                  code: "PASSWORD_VALIDATION"
                  details:
                    requirements:
                      ["uppercase", "lowercase", "number", "special"]
            userExists:
              summary: Email already registered
              value:
                success: false
                message: "A user with this email already exists"
                error:
                  code: "USER_EXISTS"
            phoneRequired:
              summary: Missing required phone for educator
              value:
                success: false
                message: "Phone number is required for educators"
                error:
                  code: "PHONE_REQUIRED"
            tokenMissing:
              summary: Missing authentication token
              value:
                success: false
                message: "Authentication token is required"
                error:
                  code: "TOKEN_MISSING"

    Unauthorized:
      description: Authentication failed or invalid credentials
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            invalidCredentials:
              summary: Wrong email or password
              value:
                success: false
                message: "Invalid email or password"

    Forbidden:
      description: Account exists but verification requirements not met
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            emailNotVerified:
              summary: Email verification pending
              value:
                success: false
                message: "Email not verified. Please check your inbox"
            phoneNotVerified:
              summary: Phone verification required for educators
              value:
                success: false
                message: "Phone number not verified. Educators must verify their phone numbers"

    NotFound:
      description: Requested resource does not exist
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            userNotFound:
              summary: No account with provided email
              value:
                success: false
                message: "User not found"

    InternalServerError:
      description: Unexpected server error occurred
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            serverError:
              summary: Internal server error
              value:
                success: false
                message: "Internal server error occurred"

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        JWT token obtained from the authentication sign-in endpoint.
        Include in the Authorization header as: `Bearer <token>`

paths:
  /api/v1/auth/signup:
    post:
      summary: Register new user account
      description: |
        Creates a new user account with role-based requirements:

        **Role Requirements:**
        - **Educators**: Must provide phone number for WhatsApp verification
        - **Organizations**: Phone number optional (ignored if provided)
        - **Admins**: Phone number not applicable (ignored if provided)

        **Post-Registration Flow:**
        1. Email verification link sent to provided address
        2. For educators: WhatsApp SMS verification sent to phone
        3. User must complete verification before signing in
      operationId: sign-up
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignUpRequest"
            examples:
              educatorRegistration:
                summary: Educator account (requires phone)
                value:
                  email: "teacher@school.edu"
                  password: "TeacherPass123!"
                  role: "educator"
                  phone: "+1234567890"
              organizationRegistration:
                summary: Organization account (phone optional)
                value:
                  email: "admin@organization.com"
                  password: "OrgSecure456!"
                  role: "organization"
              adminRegistration:
                summary: Admin account (no phone needed)
                value:
                  email: "admin@system.com"
                  password: "AdminPass789!"
                  role: "admin"
      responses:
        201:
          $ref: "#/components/responses/SignUpSuccess"
        400:
          $ref: "#/components/responses/BadRequest"
        500:
          $ref: "#/components/responses/InternalServerError"

  /api/v1/auth/signin:
    post:
      summary: Authenticate user credentials
      description: |
        Validates user credentials and returns authentication token.

        **Prerequisites:**
        - Email must be verified for all roles
        - Phone must be verified for educators

        **Response:**
        - JWT token provided in Authorization header
        - Token expires based on server configuration
        - User ID and role included for client-side routing
      operationId: sign-in
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignInRequest"
      responses:
        200:
          $ref: "#/components/responses/SignInSuccess"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        500:
          $ref: "#/components/responses/InternalServerError"

  /api/v1/auth/signout:
    post:
      summary: Invalidate user session
      description: |
        Signs out the current user by invalidating their JWT token.

        **Security:**
        - Token is added to blacklist to prevent reuse
        - Requires valid JWT token in Authorization header
        - Blacklisted tokens expire automatically after 1 hour
      operationId: sign-out
      tags: [Authentication]
      security:
        - BearerAuth: []
      responses:
        200:
          description: User signed out successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
              example:
                success: true
                message: "Signed out successfully"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/InternalServerError"

  /api/v1/auth/forgot-password:
    post:
      summary: Request password reset
      description: |
        Initiates password reset process for existing user.

        **Process:**
        1. Validates email exists in system
        2. Generates secure reset token
        3. Sends reset link via email
        4. Token expires after configured duration
      operationId: forgot-password
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ForgotPasswordRequest"
      responses:
        200:
          description: Password reset email sent successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
              example:
                success: true
                message: "Password reset email sent successfully"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"

  /api/v1/auth/update-password:
    patch:
      summary: Reset password with token
      description: |
        Updates user password using reset token from email.

        **Security:**
        - Token validated for authenticity and expiration
        - New password must meet complexity requirements
        - Password immediately hashed and stored securely
        - Reset token becomes invalid after use
      operationId: update-password
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePasswordRequest"
      responses:
        200:
          description: Password updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
              example:
                success: true
                message: "Password updated successfully"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
