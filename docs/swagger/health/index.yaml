openapi: 3.0.3
info:
  title: Health Check API
  version: v1
  description: |
    System health monitoring and status reporting API for application infrastructure monitoring.

    **Health Status Levels:**
    - `healthy`: All systems operational
    - `degraded`: System operational with minor issues
    - `unhealthy`: System experiencing critical problems

    **Monitoring Components:**
    - Database connectivity and response time
    - Memory usage and system resources
    - External service configurations
    - Environment-specific diagnostics

    **Use Cases:**
    - Load balancer health checks
    - Monitoring system integration
    - DevOps troubleshooting and diagnostics
    - Service uptime verification

  contact:
    name: API Support
    email: support@yourapi.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.yourapp.com
    description: Production server
  - url: https://romulus-backend.onrender.com
    description: Staging server
  - url: http://localhost:5000
    description: Development server

tags:
  - name: Health
    description: System health monitoring and diagnostics

components:
  schemas:
    # ================================
    # HEALTH STATUS ENUMS
    # ================================
    HealthStatus:
      type: string
      enum: [healthy, degraded, unhealthy]
      description: |
        Overall system health status:
        - `healthy`: All systems operational
        - `degraded`: Minor issues present but functional
        - `unhealthy`: Critical problems affecting service
      example: healthy

    DatabaseStatus:
      type: string
      enum: [healthy, slow, disconnected]
      description: |
        Database connection status:
        - `healthy`: Connected with good response time (<1000ms)
        - `slow`: Connected but slow response time (â‰¥1000ms)
        - `disconnected`: No database connection
      example: healthy

    Environment:
      type: string
      enum: [development, staging, production, test]
      description: Current deployment environment
      example: development

    # ================================
    # HEALTH DATA SCHEMAS
    # ================================
    DatabaseHealth:
      type: object
      required:
        - status
      properties:
        status:
          $ref: "#/components/schemas/DatabaseStatus"
        responseTime:
          type: string
          nullable: true
          description: Database ping response time in milliseconds
          example: "45ms"
          pattern: "^\\d+ms$"

    SystemHealth:
      type: object
      required:
        - environment
        - uptime
        - memory
      properties:
        environment:
          $ref: "#/components/schemas/Environment"
        uptime:
          type: string
          description: System uptime in seconds
          example: "3600s"
          pattern: "^\\d+s$"
        memory:
          type: string
          description: Current memory usage in megabytes
          example: "256MB"
          pattern: "^\\d+MB$"

    ServicesHealth:
      type: object
      required:
        - cloudinary
        - email
      properties:
        cloudinary:
          type: boolean
          description: Cloudinary service configuration status
          example: true
        email:
          type: boolean
          description: Email service configuration status
          example: true

    DatabaseConfig:
      type: object
      required:
        - name
        - host
      properties:
        name:
          type: string
          description: Database name
          example: "production_db"
        host:
          type: string
          description: Database host
          example: "cluster0.mongodb.net"

    ConfigurationHealth:
      type: object
      required:
        - jwt
        - database
        - cloudinary
        - email
      properties:
        jwt:
          type: boolean
          description: JWT secret key configuration status
          example: true
        database:
          type: boolean
          description: Database URI configuration status
          example: true
        cloudinary:
          type: boolean
          description: Cloudinary configuration status
          example: true
        email:
          type: boolean
          description: Email configuration status
          example: true

    UrlsConfig:
      type: object
      required:
        - backend
        - frontend
      properties:
        backend:
          type: string
          format: uri
          description: Backend base URL
          example: "https://api.yourapp.com"
        frontend:
          type: string
          format: uri
          description: Frontend base URL
          example: "https://yourapp.com"

    DevelopmentHealth:
      type: object
      required:
        - port
        - nodeVersion
        - platform
        - database
        - configuration
        - urls
      properties:
        port:
          type: string
          description: Application port number
          example: "5000"
        nodeVersion:
          type: string
          description: Node.js version
          example: "v18.17.0"
        platform:
          type: string
          description: Operating system platform
          example: "linux"
        database:
          $ref: "#/components/schemas/DatabaseConfig"
        configuration:
          $ref: "#/components/schemas/ConfigurationHealth"
        urls:
          $ref: "#/components/schemas/UrlsConfig"

    MonitoringHealth:
      type: object
      required:
        - totalChecks
        - passing
        - issues
        - urls
      properties:
        totalChecks:
          type: integer
          description: Total number of health checks performed
          example: 5
          minimum: 0
        passing:
          type: integer
          description: Number of passing health checks
          example: 4
          minimum: 0
        issues:
          type: array
          items:
            type: string
          description: List of current health issues
          example: ["Database slow"]
        urls:
          $ref: "#/components/schemas/UrlsConfig"

    HealthData:
      type: object
      required:
        - status
        - timestamp
        - responseTime
        - database
        - system
        - services
      properties:
        status:
          $ref: "#/components/schemas/HealthStatus"
        timestamp:
          type: string
          format: date-time
          description: Health check timestamp in ISO 8601 format
          example: "2024-01-15T10:30:00.000Z"
        responseTime:
          type: string
          description: Health check response time
          example: "15ms"
          pattern: "^\\d+ms$"
        database:
          $ref: "#/components/schemas/DatabaseHealth"
        system:
          $ref: "#/components/schemas/SystemHealth"
        services:
          $ref: "#/components/schemas/ServicesHealth"
        development:
          allOf:
            - $ref: "#/components/schemas/DevelopmentHealth"
          description: Development environment details (present in non-production)
        monitoring:
          allOf:
            - $ref: "#/components/schemas/MonitoringHealth"
          description: Production monitoring information (present in production only)

    # ================================
    # RESPONSE SCHEMAS
    # ================================
    BaseResponse:
      type: object
      required:
        - success
        - message
      properties:
        success:
          type: boolean
          description: Indicates if the operation completed successfully
        message:
          type: string
          description: Human-readable response message
          example: "Operation completed successfully"

    HealthResponse:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - type: object
          required:
            - data
          properties:
            data:
              $ref: "#/components/schemas/HealthData"

  responses:
    # ================================
    # SUCCESS RESPONSES
    # ================================
    HealthySystem:
      description: All systems operational and healthy
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/HealthResponse"
          example:
            success: true
            message: "All systems operational"
            data:
              status: "healthy"
              timestamp: "2024-01-15T10:30:00.000Z"
              responseTime: "15ms"
              database:
                status: "healthy"
                responseTime: "45ms"
              system:
                environment: "production"
                uptime: "3600s"
                memory: "256MB"
              services:
                cloudinary: true
                email: true
              monitoring:
                totalChecks: 5
                passing: 5
                issues: []
                urls:
                  backend: "https://api.yourapp.com"
                  frontend: "https://yourapp.com"

    DegradedSystem:
      description: System operational but with minor issues
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/HealthResponse"
          example:
            success: true
            message: "System operational with issues"
            data:
              status: "degraded"
              timestamp: "2024-01-15T10:30:00.000Z"
              responseTime: "25ms"
              database:
                status: "slow"
                responseTime: "1200ms"
              system:
                environment: "production"
                uptime: "7200s"
                memory: "450MB"
              services:
                cloudinary: true
                email: true
              monitoring:
                totalChecks: 5
                passing: 4
                issues: ["Database slow"]
                urls:
                  backend: "https://api.yourapp.com"
                  frontend: "https://yourapp.com"

    UnhealthySystem:
      description: System experiencing critical problems
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/HealthResponse"
          example:
            success: true
            message: "System experiencing problems"
            data:
              status: "unhealthy"
              timestamp: "2024-01-15T10:30:00.000Z"
              responseTime: "50ms"
              database:
                status: "disconnected"
                responseTime: null
              system:
                environment: "production"
                uptime: "1800s"
                memory: "600MB"
              services:
                cloudinary: false
                email: true
              monitoring:
                totalChecks: 5
                passing: 2
                issues:
                  [
                    "Database disconnected",
                    "High memory usage",
                    "Cloudinary not configured",
                  ]
                urls:
                  backend: "https://api.yourapp.com"
                  frontend: "https://yourapp.com"

paths:
  /health:
    get:
      summary: Check system health
      description: |
        Performs comprehensive health checks on all system components and returns detailed status information.

        **Health Checks Performed:**
        - Database connectivity and response time
        - Memory usage monitoring (threshold: 500MB)
        - External service configuration validation
        - System uptime and environment information

        **Response Codes:**
        - `200`: System healthy or degraded but functional
        - `503`: System unhealthy with critical issues

        **Monitoring Integration:**
        This endpoint is designed for:
        - Load balancer health checks
        - Monitoring system integration (Prometheus, DataDog, etc.)
        - Automated alerting systems
        - DevOps troubleshooting workflows

        **Environment-Specific Data:**
        - **Development**: Includes detailed configuration and diagnostic information
        - **Production**: Includes monitoring metrics and issue tracking
      operationId: check-system-health
      tags: [Health]
      responses:
        200:
          $ref: "#/components/responses/HealthySystem"
        503:
          $ref: "#/components/responses/UnhealthySystem"
      x-internal: false
      x-monitoring: true
