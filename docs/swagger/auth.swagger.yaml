openapi: 3.0.0
info:
  title: Authentication API
  version: v1
  description: API for user authentication and account management.

tags:
  - name: Auth
    description: API endpoints for user authentication and account management.

components:
  schemas:
    # Reusable Schema Definitions
    ID:
      type: string
      description: Unique identifier.
      example: "60d0fe4f5311236168a109ca"
      pattern: "^[0-9a-fA-F]{24}$"

    Email:
      type: string
      format: email
      description: Email address.
      example: "johndoe@example.com"
      maxLength: 255
      minLength: 5

    Password:
      type: string
      format: password
      description: User password. Must be at least 6 characters long.
      example: "SecurePass123"
      minLength: 6
      maxLength: 128

    FirstName:
      type: string
      description: First name of the user.
      example: "John"
      minLength: 2
      maxLength: 50

    LastName:
      type: string
      description: Last name of the user.
      example: "Doe"
      minLength: 2
      maxLength: 50

    PhoneNumber:
      type: string
      description: Phone number in international format.
      example: "+1234567890"
      pattern: "^\\+?[1-9]\\d{1,14}$"
      minLength: 10
      maxLength: 15

    Role:
      type: string
      enum: [admin, organization, educator]
      description: Role of the user (admin, organization, or educator).
      default: educator
      example: educator

    Token:
      type: string
      description: JWT token or verification token.
      example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

    SignUpRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          $ref: "#/components/schemas/Email"
        password:
          $ref: "#/components/schemas/Password"

    SignInRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          $ref: "#/components/schemas/Email"
        password:
          $ref: "#/components/schemas/Password"

    ForgotPasswordRequest:
      type: object
      required:
        - email
      properties:
        email:
          $ref: "#/components/schemas/Email"

    UpdatePasswordRequest:
      type: object
      required:
        - password
        - token
      properties:
        password:
          $ref: "#/components/schemas/Password"
        token:
          $ref: "#/components/schemas/Token"

    ServiceResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Indicates if the operation was successful.
          example: true
        message:
          type: string
          description: Response message.
          example: "Operation completed successfully."
        data:
          description: Response data (varies by endpoint).

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
          description: Indicates the request was unsuccessful.
        message:
          type: string
          description: Error message.
          example: "An error occurred."

    # Updated SignIn response data structure to match service implementation
    SignInData:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/ID"
        role:
          $ref: "#/components/schemas/Role"

    SignInResponse:
      allOf:
        - $ref: "#/components/schemas/ServiceResponse"
        - type: object
          properties:
            data:
              $ref: "#/components/schemas/SignInData"
            token:
              $ref: "#/components/schemas/Token"
          example:
            success: true
            message: "Signed in successfully."
            data:
              id: "60d0fe4f5311236168a109ca"
              role: "educator"
            token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

    SignUpResponse:
      allOf:
        - $ref: "#/components/schemas/ServiceResponse"
        - type: object
          example:
            success: true
            message: "Account registered successfully. Please verify your email address."

    ForgotPasswordResponse:
      allOf:
        - $ref: "#/components/schemas/ServiceResponse"
        - type: object
          example:
            success: true
            message: "Reset password email sent successfully."

    UpdatePasswordResponse:
      allOf:
        - $ref: "#/components/schemas/ServiceResponse"
        - type: object
          example:
            success: true
            message: "Password updated successfully."

    SignOutResponse:
      allOf:
        - $ref: "#/components/schemas/ServiceResponse"
        - type: object
          example:
            success: true
            message: "Signed out successfully."

  responses:
    UserRegistered:
      description: User registered successfully.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SignUpResponse"

    SignInSuccess:
      description: User signed in successfully.
      headers:
        Authorization:
          description: Bearer token for authentication
          schema:
            type: string
            example: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        Access-Control-Expose-Headers:
          description: Exposed headers for CORS
          schema:
            type: string
            example: "Authorization"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SignInResponse"

    SignOutSuccess:
      description: User signed out successfully.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SignOutResponse"

    PasswordResetEmailSent:
      description: Password reset email sent successfully.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ForgotPasswordResponse"

    PasswordUpdated:
      description: Password updated successfully.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UpdatePasswordResponse"

    BadRequest:
      description: Bad request - validation error or missing parameters.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            validation_error:
              value:
                success: false
                message: "Email is required."
            user_exists:
              value:
                success: false
                message: "A user with this email already exists."
            no_token:
              value:
                success: false
                message: "No token found"
            invalid_token:
              value:
                success: false
                message: "Invalid or expired token"

    Unauthorized:
      description: Unauthorized - invalid credentials or token.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            invalid_credentials:
              value:
                success: false
                message: "Invalid email or password."
            invalid_password:
              value:
                success: false
                message: "Invalid password."
            invalid_token:
              value:
                success: false
                message: "The provided token is invalid or expired."

    Forbidden:
      description: Forbidden - email or phone not verified.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            email_not_verified:
              value:
                success: false
                message: "Email not verified. Please check your inbox."

    NotFound:
      description: Resource not found.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            user_not_found:
              value:
                success: false
                message: "User not found"

    InternalServerError:
      description: Internal server error.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            token_generation_failed:
              value:
                success: false
                message: "Token generation failed."
            email_send_failed:
              value:
                success: false
                message: "Failed to send the welcome email."
            password_update_failed:
              value:
                success: false
                message: "Password update failed"
            user_creation_failed:
              value:
                success: false
                message: "Failed to create a new user."
            token_blacklist_failed:
              value:
                success: false
                message: "An error occurred while blacklisting the token."

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

paths:
  /api/auth/signup:
    post:
      summary: Register a new user
      description: |
        Creates a new user account with email and password.

        **Verification Process:**
        - A verification email is sent to the provided email address
        - Users must verify their email before signing in
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignUpRequest"
            examples:
              user_signup:
                summary: User registration
                value:
                  email: "john.doe@example.com"
                  password: "SecurePass123"
      responses:
        201:
          $ref: "#/components/responses/UserRegistered"
        400:
          $ref: "#/components/responses/BadRequest"
        500:
          $ref: "#/components/responses/InternalServerError"

  /api/auth/signin:
    post:
      summary: Sign in a user
      description: |
        Authenticates the user using their credentials and returns user data with JWT token.

        **Prerequisites:**
        - Email must be verified

        **Response:**
        - JWT token is included in the response and set in Authorization header
        - User information is returned in the data object
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignInRequest"
            example:
              email: "john.doe@example.com"
              password: "SecurePass123"
      responses:
        200:
          $ref: "#/components/responses/SignInSuccess"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        500:
          $ref: "#/components/responses/InternalServerError"

  /api/auth/signout:
    post:
      summary: Sign out a user
      description: |
        Signs out the user by blacklisting their JWT token and clearing cookies.
        Requires a valid JWT token in the Authorization header.
      tags: [Auth]
      security:
        - bearerAuth: []
      responses:
        200:
          $ref: "#/components/responses/SignOutSuccess"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/InternalServerError"

  /api/auth/forgot-password:
    post:
      summary: Request password reset
      description: |
        Initiates a password reset for the specified user.
        A password reset email with a secure token will be sent to the user's email address.
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ForgotPasswordRequest"
            example:
              email: "john.doe@example.com"
      responses:
        200:
          $ref: "#/components/responses/PasswordResetEmailSent"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"

  /api/auth/update-password:
    patch:
      summary: Update password with reset token
      description: |
        Updates the user's password using a reset token received via email.
        The token is validated before allowing the password change.
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePasswordRequest"
            example:
              token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
              password: "NewSecurePass789"
      responses:
        200:
          $ref: "#/components/responses/PasswordUpdated"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"