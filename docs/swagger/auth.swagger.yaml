openapi: 3.0.3
info:
  title: Authentication API
  version: v1
  description: |
    Comprehensive API for user authentication and account management with role-based access control.

    **Supported Roles:**
    - `admin`: Administrative privileges
    - `user`: User capabilities  

    **Authentication Flow:**
    1. Register with email, password, and role
    2. Verify email address via sent verification link
    3. Sign in to receive JWT token
    4. Use token in Authorization header for protected endpoints
  contact:
    name: API Support
    email: support@yourapi.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.yourapp.com
    description: Production server
  - url: https://staging-api.yourapp.com
    description: Staging server
  - url: http://localhost:3000
    description: Development server

tags:
  - name: Authentication
    description: User authentication and account management endpoints

components:
  schemas:
    # Primitive Types
    ID:
      type: string
      description: MongoDB ObjectId identifier
      example: "60d0fe4f5311236168a109ca"
      pattern: "^[0-9a-fA-F]{24}$"

    Email:
      type: string
      format: email
      description: Valid email address
      example: "johndoe@example.com"
      maxLength: 255
      minLength: 5
      pattern: "^\\S+@\\S+\\.\\S+$"

    Password:
      type: string
      format: password
      description: |
        Secure password with the following requirements:
        - Minimum 8 characters
        - At least one uppercase letter
        - At least one lowercase letter  
        - At least one number
        - At least one special character
      example: "SecurePass123!"
      minLength: 8
      maxLength: 128
      pattern: "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]).{8,}$"

    Role:
      type: string
      enum: [admin, user]
      description: |
        User role determining access permissions:
        - `admin`: Full system access
        - `user`: User management
      default: user
      example: user

    Token:
      type: string
      description: JWT authentication or verification token
      example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYwZDBmZTRmNTMxMTIzNjE2OGExMDljYSIsInJvbGUiOiJ1c2VyIiwiaWF0IjoxNjI0NTQzMzE5LCJleHAiOjE2MjQ2Mjk3MTl9.example"

    # Request DTOs
    SignUpRequest:
      type: object
      required:
        - email
        - password
        - role
      properties:
        email:
          $ref: "#/components/schemas/Email"
        password:
          $ref: "#/components/schemas/Password"
        role:
          $ref: "#/components/schemas/Role"
      example:
        email: "user@example.com"
        password: "SecurePass123!"
        role: "user"

    SignInRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          $ref: "#/components/schemas/Email"
        password:
          $ref: "#/components/schemas/Password"
      example:
        email: "user@example.com"
        password: "SecurePass123!"

    ForgotPasswordRequest:
      type: object
      required:
        - email
      properties:
        email:
          $ref: "#/components/schemas/Email"
      example:
        email: "user@example.com"

    UpdatePasswordRequest:
      type: object
      required:
        - password
        - token
      properties:
        password:
          $ref: "#/components/schemas/Password"
        token:
          $ref: "#/components/schemas/Token"
      example:
        password: "NewSecurePass456!"
        token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

    # Response DTOs
    BaseResponse:
      type: object
      required:
        - success
        - message
      properties:
        success:
          type: boolean
          description: Indicates if the operation completed successfully
        message:
          type: string
          description: Human-readable response message

    ErrorResponse:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - type: object
          properties:
            success:
              example: false
            message:
              example: "An error occurred processing your request"

    SignUpResponse:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - type: object
          example:
            success: true
            message: "Account registered successfully. Please verify your email address."

    SignInData:
      type: object
      required:
        - id
        - role
      properties:
        id:
          $ref: "#/components/schemas/ID"
        role:
          $ref: "#/components/schemas/Role"
      example:
        id: "60d0fe4f5311236168a109ca"
        role: "user"

    SignInResponse:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - type: object
          required:
            - data
            - token
          properties:
            data:
              $ref: "#/components/schemas/SignInData"
            token:
              $ref: "#/components/schemas/Token"
          example:
            success: true
            message: "Signed in successfully."
            data:
              id: "60d0fe4f5311236168a109ca"
              role: "user"
            token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

    SignOutResponse:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - type: object
          example:
            success: true
            message: "Signed out successfully."

    ForgotPasswordResponse:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - type: object
          example:
            success: true
            message: "Reset password email sent successfully."

    UpdatePasswordResponse:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - type: object
          example:
            success: true
            message: "Password updated successfully."

  responses:
    # Success Responses
    SignUpSuccess:
      description: User account created successfully
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SignUpResponse"

    SignInSuccess:
      description: User authenticated successfully
      headers:
        Authorization:
          description: Bearer token for subsequent authenticated requests
          schema:
            type: string
            example: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        Access-Control-Expose-Headers:
          description: Exposed headers for CORS compatibility
          schema:
            type: string
            example: "Authorization"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SignInResponse"

    SignOutSuccess:
      description: User signed out and token invalidated
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SignOutResponse"

    PasswordResetEmailSent:
      description: Password reset email dispatched successfully
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ForgotPasswordResponse"

    PasswordUpdated:
      description: Password changed successfully
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UpdatePasswordResponse"

    # Error Responses
    BadRequest:
      description: Invalid request data or business logic violation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            validation_error:
              summary: Field validation failed
              value:
                success: false
                message: "Password must be at least 8 characters long and contain uppercase, lowercase, number, and special character"
            user_exists:
              summary: Email already registered
              value:
                success: false
                message: "A user with this email already exists."
            no_token:
              summary: Missing authentication token
              value:
                success: false
                message: "No token found"
            invalid_token:
              summary: Malformed or expired token
              value:
                success: false
                message: "Invalid or expired token"
            invalid_token_payload:
              summary: Token missing required data
              value:
                success: false
                message: "Invalid token payload"

    Unauthorized:
      description: Authentication failed or invalid credentials
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            invalid_credentials:
              summary: Wrong email or password
              value:
                success: false
                message: "Invalid email or password."
            invalid_password:
              summary: Password verification failed
              value:
                success: false
                message: "Invalid password."
            expired_token:
              summary: Token has expired
              value:
                success: false
                message: "The provided token is invalid or expired."

    Forbidden:
      description: Account exists but verification requirements not met
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            email_not_verified:
              summary: Email verification pending
              value:
                success: false
                message: "Email not verified. Please check your inbox."

    NotFound:
      description: Requested resource does not exist
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            user_not_found:
              summary: No account with provided email
              value:
                success: false
                message: "User not found"

    InternalServerError:
      description: Unexpected server error occurred
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            token_generation_failed:
              summary: JWT token creation failed
              value:
                success: false
                message: "Token generation failed."
            email_send_failed:
              summary: Email service unavailable
              value:
                success: false
                message: "Failed to send the welcome email."
            password_update_failed:
              summary: Database update failed
              value:
                success: false
                message: "Password update failed"
            user_creation_failed:
              summary: User registration failed
              value:
                success: false
                message: "Failed to create a new user."
            token_blacklist_failed:
              summary: Token invalidation failed
              value:
                success: false
                message: "An error occurred while blacklisting the token."

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        JWT token obtained from the sign-in endpoint.
        Include in the Authorization header as: `Bearer <token>`

paths:
  /api/auth/signup:
    post:
      summary: Register new user account
      description: |
        Creates a new user account with role-based requirements:

        **Post-Registration Flow:**
        1. Email verification link sent to provided address
        2. User must complete verification before signing in
      operationId: signUp
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignUpRequest"
            examples:
              user_registration:
                summary: User account
                value:
                  email: "teacher@school.edu"
                  password: "TeacherPass123!"
                  role: "user"
              admin_registration:
                summary: Admin account
                value:
                  email: "admin@system.com"
                  password: "AdminPass789!"
                  role: "admin"
      responses:
        201:
          $ref: "#/components/responses/SignUpSuccess"
        400:
          $ref: "#/components/responses/BadRequest"
        500:
          $ref: "#/components/responses/InternalServerError"

  /api/auth/signin:
    post:
      summary: Authenticate user credentials
      description: |
        Validates user credentials and returns authentication token.

        **Prerequisites:**
        - Email must be verified for all roles
 
        **Response:**
        - JWT token provided in Authorization header
        - Token expires based on server configuration
        - User ID and role included for client-side routing
      operationId: signIn
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignInRequest"
      responses:
        200:
          $ref: "#/components/responses/SignInSuccess"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        500:
          $ref: "#/components/responses/InternalServerError"

  /api/auth/signout:
    post:
      summary: Invalidate user session
      description: |
        Signs out the current user by invalidating their JWT token.

        **Security:**
        - Token is added to blacklist to prevent reuse
        - Requires valid JWT token in Authorization header
        - Blacklisted tokens expire automatically after 1 hour
      operationId: signOut
      tags: [Authentication]
      parameters:
        - name: Authorization
          in: header
          required: true
          description: Bearer token from sign-in response
          schema:
            type: string
            example: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      responses:
        200:
          $ref: "#/components/responses/SignOutSuccess"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/InternalServerError"

  /api/auth/forgot-password:
    post:
      summary: Request password reset
      description: |
        Initiates password reset process for existing user.

        **Process:**
        1. Validates email exists in system
        2. Generates secure reset token
        3. Sends reset link via email
        4. Token expires after configured duration
      operationId: forgotPassword
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ForgotPasswordRequest"
      responses:
        200:
          $ref: "#/components/responses/PasswordResetEmailSent"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"

  /api/auth/update-password:
    patch:
      summary: Reset password with token
      description: |
        Updates user password using reset token from email.

        **Security:**
        - Token validated for authenticity and expiration
        - New password must meet complexity requirements
        - Password immediately hashed and stored securely
        - Reset token becomes invalid after use
      operationId: updatePassword
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePasswordRequest"
      responses:
        200:
          $ref: "#/components/responses/PasswordUpdated"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"