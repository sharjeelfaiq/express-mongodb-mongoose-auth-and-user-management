openapi: 3.0.3
info:
  title: OTP API
  version: v1
  description: |
    RESTful API for One-Time Password (OTP) generation, delivery, and verification.

    ## Overview
    This API provides secure OTP-based authentication for password reset and two-factor authentication flows.

    ## Key Features
    - Cryptographically secure 6-digit OTP generation
    - Bcrypt hashing with salt for OTP storage
    - 5-minute automatic expiration with MongoDB TTL
    - Support for multiple concurrent OTPs per user
    - Email delivery via Nodemailer

    ## Security Model
    - OTPs are hashed using bcrypt (10 salt rounds) before storage
    - Automatic cleanup via MongoDB TTL index
    - Constant-time comparison to prevent timing attacks
    - No authentication required (used for password reset flow)

    ## Integration Points
    - User Management API for user validation
    - Email service for OTP delivery
    - MongoDB for secure OTP storage

  contact:
    name: API Support Team
    email: support@yourapi.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.yourapp.com
    description: Production server
  - url: https://romulus-backend.onrender.com
    description: Staging server
  - url: http://localhost:5000
    description: Development server

tags:
  - name: OTP
    description: One-Time Password generation and verification

components:
  schemas:
    # ================================
    # PRIMITIVE TYPES
    # ================================
    Email:
      type: string
      format: email
      description: Valid email address (lowercase, trimmed)
      example: "user@example.com"
      maxLength: 255
      minLength: 5
      pattern: "^\\S+@\\S+\\.\\S+$"

    OtpCode:
      type: string
      description: 6-digit numeric OTP code
      example: "123456"
      pattern: "^[0-9]{6}$"
      minLength: 6
      maxLength: 6

    # ================================
    # RESPONSE STRUCTURES
    # ================================
    BaseResponse:
      type: object
      required:
        - success
        - message
      properties:
        success:
          type: boolean
          description: Indicates if the operation completed successfully
        message:
          type: string
          description: Human-readable response message
          example: "Operation completed successfully"

    ErrorResponse:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - type: object
          properties:
            success:
              example: false
            message:
              example: "An error occurred processing your request"

    # ================================
    # REQUEST SCHEMAS
    # ================================
    OtpSendRequest:
      type: object
      required:
        - email
      properties:
        email:
          $ref: "#/components/schemas/Email"
      example:
        email: "user@example.com"

    OtpVerifyRequest:
      type: object
      required:
        - email
        - otp
      properties:
        email:
          $ref: "#/components/schemas/Email"
        otp:
          $ref: "#/components/schemas/OtpCode"
      example:
        email: "user@example.com"
        otp: "123456"

  responses:
    # ================================
    # SUCCESS RESPONSES
    # ================================
    OtpSentSuccess:
      description: OTP generated and sent successfully
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/BaseResponse"
              - type: object
                example:
                  success: true
                  message: "OTP sent successfully"

    OtpVerifiedSuccess:
      description: OTP verified successfully
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/BaseResponse"
              - type: object
                example:
                  success: true
                  message: "OTP verified successfully"

    # ================================
    # ERROR RESPONSES
    # ================================
    BadRequest:
      description: Invalid request data or OTP validation failed
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            missingEmail:
              summary: Email field missing
              value:
                success: false
                message: "Email is required"
            invalidEmail:
              summary: Invalid email format
              value:
                success: false
                message: "Please provide a valid email address"
            missingOtp:
              summary: OTP field missing
              value:
                success: false
                message: "OTP is required"
            invalidOtpFormat:
              summary: OTP format validation failed
              value:
                success: false
                message: "OTP must be a 6-digit number"
            invalidOtp:
              summary: OTP verification failed
              value:
                success: false
                message: "Invalid or expired OTP"
            noActiveOtp:
              summary: No active OTPs found
              value:
                success: false
                message: "No active OTP found for this email"

    NotFound:
      description: Requested resource does not exist
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            userNotFound:
              summary: User not found
              value:
                success: false
                message: "User not found"

    InternalServerError:
      description: Server error during OTP operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            otpSaveFailed:
              summary: Database save operation failed
              value:
                success: false
                message: "Failed to save OTP"
            emailSendFailed:
              summary: Email delivery failed
              value:
                success: false
                message: "Failed to send OTP email"
            otpGenerationFailed:
              summary: OTP generation failed
              value:
                success: false
                message: "Failed to generate OTP"

paths:
  /api/v1/otp/send:
    post:
      tags:
        - OTP
      summary: Generate and send OTP
      description: |
        Generates a secure 6-digit OTP and sends it to the user's registered email address.

        ## Process Flow
        1. Validates user existence by email lookup
        2. Generates cryptographically secure 6-digit OTP using `crypto.randomInt(100000, 999999)`
        3. Hashes OTP using bcrypt with 10 salt rounds
        4. Stores hashed OTP with 5-minute expiration time
        5. Sends raw OTP to user's email via configured email service
        6. Returns success confirmation

        ## OTP Properties
        - **Format**: 6-digit numeric code (100000-999999)
        - **Expiration**: 5 minutes from generation
        - **Storage**: Hashed with bcrypt, auto-deleted after expiration
        - **Delivery**: HTML email template via Nodemailer

        ## Error Handling
        - User validation failure returns 404
        - Database save failure returns 500
        - Email delivery failures are logged but may not fail the request
      operationId: send-otp
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OtpSendRequest"
      responses:
        200:
          $ref: "#/components/responses/OtpSentSuccess"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"

  /api/v1/otp/verify:
    post:
      tags:
        - OTP
      summary: Verify OTP
      description: |
        Verifies the provided OTP against stored OTPs for the specified user.

        ## Process Flow
        1. Validates user existence by email lookup
        2. Retrieves all active (non-expired) OTPs for the user
        3. Compares provided OTP against each stored hash using bcrypt
        4. Returns success if any comparison matches

        ## Verification Features
        - **Multiple OTP Support**: Handles concurrent OTPs gracefully
        - **Secure Comparison**: Uses bcrypt.compare() for constant-time comparison
        - **Automatic Cleanup**: Expired OTPs are auto-removed by MongoDB TTL
        - **Race Condition Handling**: Supports multiple active OTPs per user

        ## Security Considerations
        - All comparisons are performed even after a match is found
        - Constant-time comparison prevents timing attacks
        - Generic error messages prevent user enumeration
      operationId: verify-otp
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OtpVerifyRequest"
      responses:
        200:
          $ref: "#/components/responses/OtpVerifiedSuccess"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
