openapi: 3.0.3
info:
  title: Email Verification API
  version: 1.0.0
  description: |
    RESTful API for email verification and notification operations supporting user account activation.
    
    ## Overview
    This API provides endpoints for email verification during user registration and account activation processes.
    
    ## Key Features
    - JWT-based email verification tokens
    - Automatic user cleanup on verification failures
    - HTML email templates for verification
    - Verification notification pages
    
    ## Security Model
    - No authentication required (part of account activation flow)
    - Time-limited JWT tokens with user identification
    - Single-use verification tokens
    
    ## Integration Points
    - User Management API for user data operations
    - Nodemailer for email delivery
    - JWT for token generation and validation
  contact:
    name: API Support Team
    email: support@romulus.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.romulus.com
    description: Production server
  - url: https://staging-api.romulus.com
    description: Staging server
  - url: http://localhost:3000
    description: Local development server

tags:
  - name: Email Verification
    description: Email verification token management and validation

paths:
  /api/email/check-verification-token/{verificationToken}:
    get:
      tags:
        - Email Verification
      summary: Verify email address with token
      description: |
        Validates the email verification token and activates the user account.
        
        ## Process Flow
        1. Decodes and validates the JWT verification token
        2. Extracts `userId` from token payload
        3. Updates user's `isEmailVerified` status to `true`
        4. Returns HTML verification success page
        
        ## Token Requirements
        - Valid JWT format signed with system secret
        - Contains `userId` field with valid MongoDB ObjectId
        - Must not be expired
        
        ## Response Format
        Returns HTML content (not JSON) using `res.send()` containing the verification 
        notification page with login redirect link.
      operationId: checkVerificationToken
      parameters:
        - $ref: '#/components/parameters/VerificationTokenPath'
      responses:
        '200':
          description: Email verified successfully
          content:
            text/html:
              schema:
                type: string
                description: HTML page confirming successful email verification with login link
              example: |
                <!DOCTYPE html>
                <html>
                  <body>
                    <h1>Email Verified Successfully!</h1>
                    <p>Your email has been verified. You can now <a href="https://romulus.com/login">login</a>.</p>
                  </body>
                </html>
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/email/send-verification-token:
    post:
      tags:
        - Email Verification
      summary: Send verification email
      description: |
        Sends a verification email containing a secure JWT token to the specified email address.
        
        ## Process Flow
        1. Validates that a user exists with the provided email
        2. Generates JWT verification token containing user ID
        3. Sends HTML verification email via Nodemailer
        4. Returns JSON success response
        
        ## Error Handling
        If token generation or email sending fails, the user account is automatically 
        deleted to prevent orphaned unverified accounts.
        
        ## Email Template
        Uses HTML template from `views/verification-email/index.html` with dynamic 
        token and backend URL substitution.
      operationId: sendVerificationToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendVerificationRequest'
      responses:
        '200':
          $ref: '#/components/responses/VerificationEmailSent'
        '404':
          $ref: '#/components/responses/UserNotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  schemas:
    SendVerificationRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
          description: Email address to send verification token
          example: user@example.com
          minLength: 5
          maxLength: 255
          pattern: '^[\w\.-]+@[\w\.-]+\.\w+$'

    SuccessResponse:
      type: object
      required:
        - success
        - message
      properties:
        success:
          type: boolean
          description: Indicates operation success
          example: true
        message:
          type: string
          description: Human-readable success message
          example: Verification email sent successfully

    ErrorResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          description: Error message describing what went wrong
        error:
          type: object
          description: Additional error details (when available)
          properties:
            statusCode:
              type: integer
              description: HTTP status code
            status:
              type: string
              description: Error status text

  parameters:
    VerificationTokenPath:
      in: path
      name: verificationToken
      required: true
      description: |
        JWT verification token from email link.
        
        Token must:
        - Be a valid JWT signed with system secret
        - Contain `userId` field in payload
        - Not be expired
        - Be properly URL-encoded if containing special characters
      schema:
        type: string
        minLength: 20
      example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2MGQwZmU0ZjUzMTEyMzYxNjhhMTA5Y2EiLCJpYXQiOjE2MjQyOTQ0MDAsImV4cCI6MTYyNDM4MDgwMH0.XkNaMpELhJR7lBZIRRGv5flr7W1Hk8ioh8KZTGNcwqA

  responses:
    VerificationEmailSent:
      description: Verification email sent successfully
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SuccessResponse'
          example:
            success: true
            message: Verification email sent successfully

    BadRequest:
      description: Invalid request data or malformed token
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            invalidToken:
              summary: Token validation failed
              value:
                message: Invalid token
            missingUserId:
              summary: Token missing userId field
              value:
                message: Token does not contain the user id
            missingEmail:
              summary: Email field not provided
              value:
                message: Email is required

    UserNotFound:
      description: No user found with provided email
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            message: User not found

    InternalServerError:
      description: Server error during operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            verificationError:
              summary: Database update failed
              value:
                message: An error occurred while verifying the email
            tokenGenerationError:
              summary: JWT generation failed
              value:
                message: An error occurred while generating the token.
            emailSendError:
              summary: Email delivery failed
              value:
                message: Failed to send the welcome email.

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token authentication (not used for these endpoints)

x-readme:
  explorer-enabled: true
  proxy-enabled: true
  samples-languages:
    - javascript
    - python
    - curl
    - node

x-implementation-notes:
  error-handling: |
    All errors are handled using http-errors library and asyncHandler wrapper.
    Failed verification attempts may result in automatic user deletion.
  
  email-service: |
    Email sending uses Nodemailer with configurable SMTP settings.
    Templates are loaded from the views directory.
  
  token-generation: |
    Tokens are generated using JWT with user ID in payload.
    Token expiration is configured in the generateToken utility.
  
  response-formats: |
    - check endpoint returns HTML content (not JSON)
    - send endpoint returns JSON
    Both use 200 status code for success